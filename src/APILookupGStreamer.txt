#
# This file is part of gtkD.
#
# gtkD is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# gtkD is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with gtkD; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

#############################################
### Definitions for wrapping Gtk+ ###########
#############################################

# must start with wrap
wrap: gstreamer
file: Gst-1.0.gir

noEnum: DebugGraphDetails
addEnums: start
	/**
	* Available details for pipeline graphs produced by GST_DEBUG_BIN_TO_DOT_FILE()
	* and GST_DEBUG_BIN_TO_DOT_FILE_WITH_TS().
	*/
	public enum GstDebugGraphDetails : long
	{
		/**
		* show caps-name on edges
		*/
		MEDIA_TYPE = 1,
		/**
		* show caps-details on edges
		*/
		CAPS_DETAILS = 2,
		/**
		* show modified parameters on
		* elements
		*/
		NON_DEFAULT_PARAMS = 4,
		/**
		* show element states
		*/
		STATES = 8,
		/**
		* show full element parameter values even
		* if they are very long
		*/
		FULL_PARAMS = 16,
		/**
		* show all the typical details that one might want
		*/
		ALL = 15,
		/**
		* show all details regardless of how large or
		* verbose they make the resulting output
		*/
		VERBOSE = 4294967295,
	}
	alias GstDebugGraphDetails DebugGraphDetails;
addEnums: stop

struct: Bin
code: start
	/** */
	public this(Element elem)
	{
		super( elem.getElementStruct(), true );
		this.gstBin = cast(GstBin*)elem.getElementStruct();
	}

	/**
	 * Adds a list of elements to a bin.
	 * This function is equivalent to calling add() for each member of the list.
	 * The return value of each add() is ignored.
	 */
	public void addMany( Element[] elems... )
	{
		foreach( e; elems ) add( e );
	}

	/**
	 * Remove a list of elements from a bin.
	 * This function is equivalent to calling remove() with each member of the list.
	 */
	public void removeMany( Element[] elems... )
	{
		foreach( e; elems ) remove( e );
	}
code: end

struct: BufferPool
inout: config_get_allocator allocator

struct: Bus
noCode: add_watch
noCode: set_sync_handler
code: start
	/**
	 * Adds a bus watch to the default main context with the default priority.
	 * This function is used to receive asynchronous messages in the main loop.
	 * The watch can be removed using g_source_remove() or by returning FALSE
	 * from func.
	 * MT safe.
	 * Params:
	 *  dlg = A function to call when a message is received.
	 * Returns:
	 *  The event source id.
	 */
	public uint addWatch( bool delegate(Message) dlg )
	{
		onWatchListener = dlg;
		return gst_bus_add_watch(gstBus, cast(GstBusFunc)&watchCallBack, cast(void*)this);
	}

	bool delegate(Message) onWatchListener;

	extern(C) static int watchCallBack(GstBus* bus, GstMessage* msg, Bus bus_d )//gpointer data)
	{
		Message msg_d = new Message( msg );

		return bus_d.onWatchListener( msg_d );
	}
	
	 /**
	  * Use this for making an XOverlay.
	  * Sets the synchronous handler on the bus. The function will be called
	  * every time a new message is posted on the bus. Note that the function
	  * will be called in the same thread context as the posting object. This
	  * function is usually only called by the creator of the bus. Applications
	  * should handle messages asynchronously using the gst_bus watch and poll
	  * functions.
	  * You cannot replace an existing sync_handler. You can pass NULL to this
	  * function, which will clear the existing handler.
	  * Params:
	  *  dlg = The handler function to install
	  */
	public void setSyncHandler( GstBusSyncReply delegate(Message) dlg )
	{
		onSyncHandlerListener = dlg;
		gst_bus_set_sync_handler(gstBus, cast(GstBusSyncHandler)&syncHandlerCallBack, cast(void*)this, null);
	}
	
	GstBusSyncReply delegate(Message) onSyncHandlerListener;
	
	extern(C) static GstBusSyncReply syncHandlerCallBack(GstBus* bus, GstMessage* msg, Bus bus_d)
	{
		Message msg_d = new Message( msg );
		
		return bus_d.onSyncHandlerListener( msg_d );
	}
code: end

struct: ChildProxy
alias: get_property childGetProperty
alias: get_valist childGetValist
alias: set_property childSetProperty
alias: set_valist childSetValist

struct: ControlSource
alias: control_source_get_value getValue
alias: control_source_get_value_array getValueArray

struct: DateTime
import: glib.DateTime : GLibDateTime = DateTime
structWrap: GLib.DateTime GLibDateTime

struct: DebugMessage
namespace: DebugMessage

struct: Element
import: gobject.Type
import: gobject.c.functions
in: query_convert src_format
code: start
	/**
	 * Queries an element for the stream position.
	 * This is a convenience function for gstreamerD.
	 * Returns:
	 *  The current position in nanoseconds - GstFormat.TIME.
	 */
	public long queryPosition()
	{
		GstFormat form = GstFormat.TIME;
		long cur_pos;
		queryPosition( form, cur_pos );
		return cur_pos;
	}

	/**
	 * Queries an element for the stream duration.
	 * This is a convenience function for gstreamerD.
	 * Returns:
	 *  The duration in nanoseconds - GstFormat.TIME.
	 */
	public long queryDuration()
	{
		GstFormat form = GstFormat.TIME;
		long cur_dur;
		queryDuration( form, cur_dur );
		return cur_dur;
	}

	/**
	 *	This set's the filename for a filesrc element.
	 */
	public void location( string set )
	{
		//g_object_set( G_OBJECT(getElementStruct()), "location", set, NULL);
		setProperty("location", set);
	}

	/**
	 * Set the caps property of an Element.
	 */
	void caps( Caps cp )
	{
		g_object_set( getElementStruct(), Str.toStringz("caps"), cp.getCapsStruct(), null );
	}

	/**
	* For your convenience in gstreamerD: you can seek to the
	* position of the pipeline measured in time_nanoseconds.
	*/
	public int seek( long time_nanoseconds ) //gint64
	{
		return seek( 1.0, GstFormat.TIME, GstSeekFlags.FLUSH,
								GstSeekType.SET, time_nanoseconds,
								GstSeekType.NONE, GST_CLOCK_TIME_NONE);
	}

	/**
	* Get's all the pads from an element in a Pad[].
	*/
	public Pad[] pads()
	{
		Pad[] result;
		GValue* pad = g_value_init(new GValue(), Pad.getType());
		GstIterator* iter = gst_element_iterate_pads(gstElement);

		while ( gst_iterator_next(iter, pad) == GstIteratorResult.OK )
		{
			result ~= ObjectG.getDObject!(Pad)(cast(GstPad*)g_value_get_object(pad));
			g_value_reset(pad);
		}

		g_value_unset(pad);

		return result;
	}
code: end

struct: ElementFactory
code: start
	/**
	 * Create a new element of the type defined by the given element factory.
	 * The element will receive a guaranteed unique name,
	 * consisting of the element factory name and a number.
	 * Params:
	 *  factoryname = a named factory to instantiate
	 * Returns:
	 *  new GstElement or NULL if unable to create element
	 */
	public static Element make( string factoryname )
	{
		// GstElement* gst_element_factory_make (const gchar *factoryname,  const gchar *name);
		auto p = gst_element_factory_make(Str.toStringz(factoryname), null );

		if(p is null)
		{
			return null;
		}

		return ObjectG.getDObject!(Element)(cast(GstElement*) p);
	}
code: end

struct: Iterator
inout: new_list list

struct: Message
code: start
	/**
	* Get the type of the message.
	*/
	public GstMessageType type()
	{
		return cast(GstMessageType)getMessageStruct().type;
	}
	
	/**
	 * Get the src (the element that originated the message) of the message.
	 */
	public ObjectGst src()
	{
		return new ObjectGst( cast(GstObject*)getMessageStruct().src );
	}
code: end

struct: Pad
code: start
	/**
	 * Queries a pad for the stream position.
	 * This is a convenience function for gstreamerD.
	 * Returns:
	 *  The current position in nanoseconds - GstFormat.TIME.
	 */
	public long queryPosition()
	{
		long cur_pos;
		queryPosition( GstFormat.TIME, cur_pos );
		return cur_pos;
	}

	/**
	 * Queries a pad for the stream duration.
	 * This is a convenience function for gstreamerD.
	 * Returns:
	 *  The duration in nanoseconds - GstFormat.TIME.
	 */
	public long queryDuration()
	{
		long cur_dur;
		queryDuration( GstFormat.TIME, cur_dur );
		return cur_dur;
	}
code: end

version 1.12: start
	struct: ParamArray
	noCode: true
version 1.12: end

struct: ParamFraction
noCode: true

struct: ParamSpecFraction
class: ParamSpecFraction
import: glib.ConstructionException
import: glib.Str
move: param_spec_fraction ParamSpecFraction
noCode: param_spec_fraction
code: start
	/**
	 * This function creates a fraction GParamSpec for use by objects/elements
	 * that want to expose properties of fraction type. This function is typically
	 * used in connection with g_object_class_install_property() in a GObjects's
	 * instance_init function.
	 * Params:
	 * name = canonical name of the property specified
	 * nick = nick name for the property specified
	 * blurb = description of the property specified
	 * minNum = minimum value (fraction numerator)
	 * minDenom = minimum value (fraction denominator)
	 * maxNum = maximum value (fraction numerator)
	 * maxDenom = maximum value (fraction denominator)
	 * defaultNum = default value (fraction numerator)
	 * defaultDenom = default value (fraction denominator)
	 * flags = flags for the property specified
	 * Returns: a newly created parameter specification. [transfer full]
	 */
	public this(string name, string nick, string blurb, int minNum, int minDenom, int maxNum, int maxDenom, int defaultNum, int defaultDenom, GParamFlags flags)
	{
		auto p = gst_param_spec_fraction(Str.toStringz(name), Str.toStringz(nick), Str.toStringz(blurb), minNum, minDenom, maxNum, maxDenom, defaultNum, defaultDenom, flags);
		if(p is null)
		{
			throw new ConstructionException("null returned by gst_param_spec_fraction");
		}
		this(cast(GstParamSpecFraction*) p);
	}
code: end

struct: ProtectionMeta
class: ProtectionMeta

struct: Query
inout: parse_accept_caps_result result
in: parse_nth_format nth

struct: Segment
inout: do_seek update

struct: TypeFind
noCode: peek
code: start
	/**
	 * Returns the size bytes of the stream to identify beginning at offset. If
	 * offset is a positive number, the offset is relative to the beginning of the
	 * stream, if offset is a negative number the offset is relative to the end of
	 * the stream. The returned memory is valid until the typefinding function
	 * returns and must not be freed.
	 * Params:
	 *     offset = The offset
	 *     size = The number of bytes to return
	 * Returns: the requested data, or NULL if that data is not available.
	 */
	public ubyte[] peek(long offset, uint size)
	{
		ubyte* buff = gst_type_find_peek(gstTypeFind, offset, size);

		return buff[0 .. size];
	}
code: end

struct:

move: debug_add_log_function Debug add_log_function
move: debug_bin_to_dot_data Debug bin_to_dot_data
move: debug_bin_to_dot_file Debug bin_to_dot_file
move: debug_bin_to_dot_file_with_ts Debug bin_to_dot_file_with_ts
move: debug_construct_term_color Debug construct_term_color
move: debug_construct_win_color Debug construct_win_color
move: debug_get_all_categories Debug get_all_categories
move: debug_get_color_mode Debug get_color_mode
move: debug_get_default_threshold Debug get_default_threshold
move: debug_is_active Debug is_active
move: debug_is_colored Debug is_colored
move: debug_level_get_name Debug level_get_name
move: debug_log Debug log
move: debug_log_default Debug log_default
move: debug_log_valist Debug log_valist
move: debug_print_stack_trace Debug print_stack_trace
move: debug_remove_log_function Debug remove_log_function
move: debug_remove_log_function_by_data Debug remove_log_function_by_data
move: debug_set_active Debug set_active
move: debug_set_color_mode Debug set_color_mode
move: debug_set_color_mode_from_string Debug set_color_mode_from_string
move: debug_set_colored Debug set_colored
move: debug_set_default_threshold Debug set_default_threshold
move: debug_set_threshold_for_name Debug set_threshold_for_name
move: debug_set_threshold_from_string Debug set_threshold_from_string
move: debug_unset_threshold_for_name Debug unset_threshold_for_name

move: error_get_message GError

move: event_type_get_flags Event type_get_flags
move: event_type_get_name Event type_get_name
move: event_type_to_quark Event type_to_quark

move: filename_to_uri Uri
move: uri_error_quark Uri

move: flow_get_name Pad
move: flow_to_quark Pad
move: pad_mode_get_name Pad mode_get_name

move: format_get_by_nick Format get_by_nick
move: format_get_details Format get_details
move: format_get_name Format get_name
move: format_iterate_definitions Format iterate_definitions
move: format_register Format register
move: format_to_quark Format to_quark
move: formats_contains Format contains

move: deinit GStreamer
move: init GStreamer
move: init_check GStreamer
move: init_get_option_group GStreamer
move: is_initialized GStreamer
move: segtrap_is_enabled GStreamer
move: segtrap_set_enabled GStreamer
move: update_registry GStreamer
move: version GStreamer
move: version_string GStreamer

move: message_type_get_name Message type_get_name
move: message_type_to_quark Message type_to_quark

move: parent_buffer_meta_api_get_type ParentBufferMeta get_type

move: parse_bin_from_description Parse bin_from_description
move: parse_bin_from_description_full Parse bin_from_description_full
move: parse_error_quark Parse error_quark
move: parse_launch Parse launch
move: parse_launch_full Parse launch_full
move: parse_launchv Parse launchv
move: parse_launchv_full Parse launchv_full

move: plugin_error_quark Plugin

move: protection_meta_api_get_type ProtectionMeta get_type
move: protection_select_system ProtectionMeta

move: query_type_get_flags Query type_get_flags
move: query_type_get_name Query type_get_name
move: query_type_to_quark Query type_to_quark

move: tag_exists TagList exists
move: tag_get_description TagList get_description
move: tag_get_flag TagList get_flag
move: tag_get_nick TagList get_nick
move: tag_get_type TagList get_type
move: tag_is_fixed TagList is_fixed
move: tag_merge_strings_with_comma TagList merge_strings_with_comma
move: tag_merge_use_first TagList merge_use_first
move: tag_register TagList register
move: tag_register_static TagList register_static

move: type_find_get_type TypeFind

move: util_array_binary_search Utils array_binary_search
move: util_double_to_fraction Utils double_to_fraction
move: util_dump_mem Utils dump_mem
move: util_fraction_add Utils fraction_add
move: util_fraction_compare Utils fraction_compare
move: util_fraction_multiply Utils fraction_multiply
move: util_fraction_to_double Utils fraction_to_double
move: util_gdouble_to_guint64 Utils gdouble_to_guint64
move: util_get_timestamp Utils get_timestamp
move: util_greatest_common_divisor Utils greatest_common_divisor
move: util_greatest_common_divisor_int64 Utils greatest_common_divisor_int64
move: util_group_id_next Utils group_id_next
move: util_guint64_to_gdouble Utils guint64_to_gdouble
move: util_seqnum_compare Utils seqnum_compare
move: util_seqnum_next Utils seqnum_next
move: util_set_object_arg Utils set_object_arg
move: util_set_value_from_string Utils set_value_from_string
move: util_uint64_scale Utils uint64_scale
move: util_uint64_scale_ceil Utils uint64_scale_ceil
move: util_uint64_scale_int Utils uint64_scale_int
move: util_uint64_scale_int_ceil Utils uint64_scale_int_ceil
move: util_uint64_scale_int_round Utils uint64_scale_int_round
move: util_uint64_scale_round Utils uint64_scale_round
version 1.12: start
	move: calculate_linear_regression Utils
	move: dynamic_type_register Utils
	move: util_get_object_array Utils get_object_array
	move: util_set_object_array Utils set_object_array
version 1.12: end

move: value_can_compare ValueGst can_compare
move: value_can_intersect ValueGst can_intersect
move: value_can_subtract ValueGst can_subtract
move: value_can_union ValueGst can_union
move: value_compare ValueGst compare
move: value_deserialize ValueGst deserialize
move: value_fixate ValueGst fixate
move: value_fraction_multiply ValueGst fraction_multiply
move: value_fraction_subtract ValueGst fraction_subtract
move: value_get_bitmask ValueGst get_bitmask
move: value_get_caps ValueGst get_caps
move: value_get_caps_features ValueGst get_caps_features
move: value_get_double_range_max ValueGst get_double_range_max
move: value_get_double_range_min ValueGst get_double_range_min
move: value_get_flagset_flags ValueGst get_flagset_flags
move: value_get_flagset_mask ValueGst get_flagset_mask
move: value_set_flagset ValueGst set_flagset
move: value_get_fraction_denominator ValueGst get_fraction_denominator
move: value_get_fraction_numerator ValueGst get_fraction_numerator
move: value_get_fraction_range_max ValueGst get_fraction_range_max
move: value_get_fraction_range_min ValueGst get_fraction_range_min
move: value_get_int64_range_max ValueGst get_int64_range_max
move: value_get_int64_range_min ValueGst get_int64_range_min
move: value_get_int64_range_step ValueGst get_int64_range_step
move: value_get_int_range_max ValueGst get_int_range_max
move: value_get_int_range_min ValueGst get_int_range_min
move: value_get_int_range_step ValueGst get_int_range_step
move: value_get_structure ValueGst get_structure
move: value_init_and_copy ValueGst init_and_copy
move: value_intersect ValueGst intersect
move: value_is_fixed ValueGst is_fixed
move: value_is_subset ValueGst is_subset
move: value_register ValueGst register
move: value_serialize ValueGst serialize
move: value_set_bitmask ValueGst set_bitmask
move: value_set_caps ValueGst set_caps
move: value_set_caps_features ValueGst set_caps_features
move: value_set_double_range ValueGst set_double_range
move: value_set_fraction ValueGst set_fraction
move: value_set_fraction_range ValueGst set_fraction_range
move: value_set_fraction_range_full ValueGst set_fraction_range_full
move: value_set_int64_range ValueGst set_int64_range
move: value_set_int64_range_step ValueGst set_int64_range_step
move: value_set_int_range ValueGst set_int_range
move: value_set_int_range_step ValueGst set_int_range_step
move: value_set_structure ValueGst set_structure
move: value_subtract ValueGst subtract
move: value_union ValueGst union
